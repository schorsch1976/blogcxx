Version 10 [2018-12-02]:
blogcpp was heavyly rewritten because there were internal source code difficulties. It didnt' handle it well when there was no site dir or it was executed in an empty directory. It just segfaulted with no error message at all. The setup of a new blogsite was painful if you dont know the internals.
The final reason to rewrite was that it just crashed with no help for the user. It is a very bad first expierience for the user of a project if it just crashes without ptinting anything.

# what was changed? Why was this neccesary?
- **rewrite blogcpp.cpp**
> It was total messy. Global variables that were accessed (non const) by multiple threads. No separation of collection and generation of html. The concurrency is now like [Map and Reduce](https://en.wikipedia.org/wiki/MapReduce). This is the job of the

    ::::cpp
    template <typename KeyT, typename RetValT>
    class AsyncWorker;

> The KeyT is used to identify the results. The RetValT can be void. No more raw threads. use std::future() and std::async(launch::async,...)

- clangformat everything. Perfectly formatted code makes it easier for maintainance and future expansions.
- make a metadata structure that is after the FilesToMetadata phase const
- All messages that get printed go through boost::locale::translate(). That means, i18n will be done in no time. All arguments are positional like %1%.
- cxxopts replaced by boost::program_options
- icu replaced by boost::locale
- update inja and use exists() and existsIn() in the templates [Inja 1.0.0 Version](https://github.com/pantor/inja/releases/tag/v1.0.0)
- TemplateWrapper does now what it name implies. It totally encapulates json and the inja handling. It uses the so called PIMPL pattern that is also known as compiler firewall.
- Restructure the whole src folder. Split the tasks into manageable files that are grouped accordig to their function in the process.
- use boost::log and boost::format for logging.

> No more

    ::::cpp
    #ifdef WITH_DEBUGLOG
        stringstream ss_debuglog;
        ss_debuglog << "Gathering ...";
        DebugLog::debuglog(ss_debuglog.str());
    #endif

> Now it is typesafe and without sstream everywhere

    ::::cpp
	LOG_DEBUG("Gathering files from %1%.", file.string()); // these are variadic templates :)

# **what changes from a user perspective?**
- usage should be much more convienent as it reports its error much better
- syntax and other stuff stays the same :-)
- more stable

# what stayed the same?
- Template design
- Markdown Parser
- Emoji Parser
- Fileparser
- RSS Generator (mostly)
- SingleItem structure (mostly)
- Syntax in the pages/post files

# features added
- blog cpp can now create a howto page if no blog exists yet. It also contails the default template for that issue. The internal tool bin2cxx creates cpp and h files that the cxx arrays get included in the executable.
- blogcpp can now run without an blog.cfg. It uses internal defaults (the one from the blog.cfg-example). Just use the blog.cfg file to override what you want to change
- handle gracefully UTF BOMS in read files

# good things
- all compilation is now consistent on all platforms
- static executable size is now just 2-3 MB
- all path  handling (including the url pathes) are handled with std::filesystem.
- option added to switch the API for variant(std::variant/boost::variant) and filesystem (std::filesystem/std::experimental::filesystem and boost::filesystem)
- option added to link all static
- option added to support testing on older compilers TEST_OLDER_COMPILERS
- Installation option for logcpp added

# what i am not sure if it works
- highlight programming languages. The generated code looks correct.
- OEmbed. WITHOUT OEMBED set, the simple Media Embedder seems to work.
- RSS: Are the xml names right?

# what is not yet working
- metadata in the HTML (opengraphimg, feedmeta)
- js plugins (headscripts)
- comments (create an own template that gets loaded and parsed instead of poluting the source code with html. The job ob the template engine is separation of html and control.)
- pagination (but this was not working on master either)

# TODO list
- RSS (replace tinyxml2 with inja. we already have a templating engine)
- download the highlight.js into the static folder
- WITH_OEMBED: OEmbed (use boost::process to start the subprocess curl or wget. This remove the burden from us to compile curl with openssl on windows. There are prebuild binaries that get updated regulary. Take advantage of it.)


Version 9 [2018-11-10]:
* Replaced the aging NLTemplate engine by inja, fixing threading problems.
* Updated third-party libraries.
* Added a new theme: blerc.
* Improved the default theme's font size (= readability).
* Fixed the sorting of the yearly and monthly archives.
* Fixed the listing of duplicate categories/tags in the sidebar.
* Removed many unnecessary files from the default theme.
* Improved stdlib compatibility with CMake [schorsch_76].
* Fixed the responsivity of the page list for the default theme.


Version 8 [2018-06-23]:
* Fixed a recently introduced bug which accidentally removed the double-slash from generated URLs.
* Added support for Commento comments.
* Improved comments integration: supports separate <HEAD> scripts now.
* Improved OEmbed support: Unicode domains were potentially failing.
* Updated third-party libraries.
* Improved the slug generation again.


Version 7 [2018-02-17]:
* Updated third-party libraries.
* Improved cross-platform support: blogcpp detects <filesystem> somewhat smarter now.
* Added support for article series.
* Added a new configuration variable: series.
* Improved code structure: Created a bunch of new classes and moved stuff there.
* Improved processing speed by reducing the number of MarkdownParser and EmojiParser calls.
* Added support for XML OEmbeds.
* Tweaked the default theme.
* Added support for varying page positions.
* Fixed missing respect for the global emoji On/Off setting.
* Fixed wrong paths in the page navigation bar.
* Fixed OpenGraph image validation.
* Fixed a possible crash with the cleanup of old output files.


Version 6 [2017-12-23]:
* Fixed an error which disabled all emojis in the article/page bodies.
* Added new configuration variables: articlepath, pagepath, plugins, plugindir.
* Fixed compiler warnings in NLTemplate.
* Added Duktape as a plug-in engine.
* Added new template variables: headscripts, footscripts.
* Improved output of --new-page and --new-article, especially on Windows.
* Updated third-party libraries.
* Added support for WordPress's <!--more--> tag (even when misspelt as <!-- more -->).


Version 5 [2017-08-26]:
* Removed the Umbrella.js dependency from the default theme.
* Added a new JavaScript file for placing functions in the default theme.
* Fixed sorting of categories and tags in the sidebar.
* Fixed default Highlight.js integration for blogs which use both http and https.
* Updated third-party libraries.
* Improved the default theme.
* Fixed the theme variables so that less cases of mixed casing happen.
* Fixed compilation with Clang (no more MSVC required).
* Added threading support: Builds your site as fast as never before.
* Removed the "protocol" template variable.
* Improved the debug log functionality.
* Replaced the ConfigFile parser by a better (more standard-compliant) one.
* Improved support for building on non-Windows platforms.
* Improved the file name generator: no more apostrophes in the URL.
* Fixed an issue where italic/bold text failed to be parsed correctly.
* Fixed the xdg-open call on non-Windows systems when trying to edit a file.
* Added support for Markdown URLs written at the end of an article.
* Reworked the default Windows build script.
* Removed debug logging from the official Windows builds.


Version 4 [2017-03-23]:
* Updated third-party libraries.
* Updated the bugtracker URL.
* Improved the sidebar layout.
* Added support for configurable permalinks.
* Improved support for building on Linux.
* Fixed Markdown parsing of code blocks.
* Added code highlighting to the default theme.
* Fixed creation of new contents for different configurations.
* Fixed multiple issues which occurred if you used BlogC++ in more than one year.
* Fixed a wrong debug log message.
* Improved slug generation with special characters.


Version 3 [2016-10-01]:
* Slightly more verbose output in standard mode.
* Emojis are also applied to the sidebar archives now.
* Added CMake files (thanks, uwe!).
* Added new configuration variables: comments, commentdata, opengraphimg.
* Added support for external commenting systems: Disqus, isso, Hashover, Google, Discourse.
* Fixed hyphen weirdness concerning the output folder names.
* Updated third-party libraries.
* Added OpenGraph support to the default theme.
* Made the default theme somewhat more responsive.
* Fixed an issue where the file name creator added too many spaces.


Version 2 [2016-07-13]:
* Changed the bugtracker link. (I don't really use Bitbucket for that.)
* Fixed wrong tag archive links in the sidebar.
* Fixed an issue where bold and/or italic formatting didn't work well inside a list.
* Fixed an issue where the Markdown parser didn't close the last tag block.
* Support for RSS feed generation (global, per author, per tag, per category) was added.
* Support for change dates.
* Updated third-party libraries.
* Added the --new-page and --new-article parameters to automatically create new content stubs.
* Code cleanup: Introducing the helpers.h file for random helper methods.
* Added Emoji support.
* Added new configuration variables: fullfeed, rssdir, author, emojis.
* Improved generation of slugs.


Version 1 [2016-05-22]:
* Initial release. Enjoy.