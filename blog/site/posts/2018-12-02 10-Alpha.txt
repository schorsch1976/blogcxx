Author: Georg
Title: Changes in 10-alpha
Slug: 10-alpha
Date: 2018-12-02 13:03:40
Tags: 10-alpha
Categories: blogcpp
Series:

----------
# Rewrite of blogcpp
blogcpp was heavyly rewritten because there were internal source code difficulties. It didnt' handle it well when there was no site dir or it was executed in an empty directory. It just segfaulted with no error message at all. The setup of a new blogsite was painful if you dont know the internals.
The final reason to rewrite was that it just crashed with no help for the user. It is a very bad first expierience for the user of a project if it just crashes without ptinting anything.

# what was changed? Why was this neccesary?
- **rewrite blogcpp.cpp**
> It was total messy. Global variables that were accessed (non const) by multiple threads. No separation of collection and generation of html. The concurrency is now like [Map and Reduce](https://en.wikipedia.org/wiki/MapReduce). This is the job of the

    ::::cpp
    template <typename KeyT, typename RetValT>
    class AsyncWorker;

> The KeyT is used to identify the results. The RetValT can be void. No more raw threads. use std::future() and std::async(launch::async,...)

- clangformat everything. Perfectly formatted code makes it easier for maintainance and future expansions.
- make a metadata structure that is after the FilesToMetadata phase const
- All messages that get printed go through boost::locale::translate(). That means, i18n will be done in no time. All arguments are positional like %1%.
- cxxopts replaced by boost::program_options
- icu replaced by boost::locale
- update inja and use exists() and existsIn() in the templates [Inja 1.0.0 Version](https://github.com/pantor/inja/releases/tag/v1.0.0)
- TemplateWrapper does now what it name implies. It totally encapulates json and the inja handling. It uses the so called PIMPL pattern that is also known as compiler firewall.
- Restructure the whole src folder. Split the tasks into manageable files that are grouped accordig to their function in the process.
- use boost::log and boost::format for logging.

> No more

    ::::cpp
    #ifdef WITH_DEBUGLOG
        stringstream ss_debuglog;
        ss_debuglog << "Gathering ...";
        DebugLog::debuglog(ss_debuglog.str());
    #endif

> Now it is typesafe and without sstream everywhere

    ::::cpp
	LOG_DEBUG("Gathering files from %1%.", file.string()); // these are variadic templates :)

# **what changes from a user perspective?**
- usage should be much more convienent as it reports its error much better
- syntax and other stuff stays the same :-)
- more stable

# what stayed the same?
- Template design
- Markdown Parser
- Emoji Parser
- Fileparser
- RSS Generator (mostly)
- SingleItem structure (mostly)
- Syntax in the pages/post files

# features added
- blog cpp can now create a howto page if no blog exists yet. It also contails the default template for that issue. The internal tool bin2cxx creates cpp and h files that the cxx arrays get included in the executable.
- blogcpp can now run without an blog.cfg. It uses internal defaults (the one from the blog.cfg-example). Just use the blog.cfg file to override what you want to change
- handle gracefully UTF BOMS in read files

# good things
- all compilation is now consistent on all platforms
- static executable size is now just 2-3 MB
- all path  handling (including the url pathes) are handled with std::filesystem.
- option added to switch the API for variant(std::variant/boost::variant) and filesystem (std::filesystem/std::experimental::filesystem and boost::filesystem)
- option added to link all static
- option added to support testing on older compilers TEST_OLDER_COMPILERS
- Installation option for logcpp added

# what i am not sure if it works
- highlight programming languages. The generated code looks correct.
- OEmbed. WITHOUT OEMBED set, the simple Media Embedder seems to work.
- RSS: Are the xml names right?

# what is not yet working
- metadata in the HTML (opengraphimg, feedmeta)
- js plugins (headscripts)
- comments (create an own template that gets loaded and parsed instead of poluting the source code with html. The job ob the template engine is separation of html and control.)
- pagination (but this was not working on master either)

# TODO list
- RSS (replace tinyxml2 with inja. we already have a templating engine)
- download the highlight.js into the static folder
- WITH_OEMBED: OEmbed (use boost::process to start the subprocess curl or wget. This remove the burden from us to compile curl with openssl on windows. There are prebuild binaries that get updated regulary. Take advantage of it.)
